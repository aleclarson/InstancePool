// Generated by CoffeeScript 1.11.1
var InstancePool, Type, assertType, emptyFunction;

emptyFunction = require("emptyFunction");

assertType = require("assertType");

Type = require("Type");

module.exports = function(type, config) {
  var constructor, instancePool;
  assertType(config, Object);
  instancePool = InstancePool({
    size: config.size,
    onRetain: config.onRetain,
    onRelease: config.onRelease
  });
  assertType(config.createInstance, Function.Maybe);
  if (!(constructor = config.createInstance)) {
    type.didBuild(function(createInstance) {
      return constructor = createInstance;
    });
  }
  type.defineMethods({
    release: function() {
      return instancePool.release(this);
    }
  });
  return type.defineStatics({
    retain: function(options) {
      if (options == null) {
        options = {};
      }
      return instancePool.retain(constructor, options);
    }
  });
};

InstancePool = (function() {
  var type;
  type = Type("InstancePool");
  type.defineOptions({
    size: Number.withDefault(2e308),
    onRetain: Function.withDefault(emptyFunction),
    onRelease: Function.withDefault(emptyFunction)
  });
  type.defineValues(function(options) {
    return {
      _instances: [],
      _size: options.size,
      _onRetain: options.onRetain,
      _onRelease: options.onRelease
    };
  });
  type.defineMethods({
    retain: function(constructor, options) {
      var count, instance;
      if (count = this._instances.length) {
        instance = this._instances.pop();
        this._onRetain.call(instance, options);
        return instance;
      }
      return constructor(options);
    },
    release: function(instance) {
      if (this._instances.length < this._size) {
        this._onRelease.call(instance);
        this._instances.push(instance);
      }
    }
  });
  return type.build();
})();
